#!/bin/bash

set -e

# settings
OUTDIR="zhou_results"
VERBOSE=1

# clear the results
COMMAND="rm"
OPTIONS="-fr"
$COMMAND $OPTIONS "$OUTDIR"

# run quantiNEMO
if [ "$VERBOSE" -gt 0 ]; then echo "<< running quantiNemo >>"; fi
PARAMFILE="zhou.ini"
COMMAND="./quantiNemo"
OPTIONS=""
$COMMAND $OPTIONS "$PARAMFILE"

# process the phenotype files
if [ "$VERBOSE" -gt 0 ]; then echo "<< processing phenotypes >>"; fi
COMMAND="python fstat2csv.py"
OPTIONS="--types= --patch --no-age --no-sex --mother --father --fitness"
OUTFILE_PHEN="$OUTDIR/ind_phen.csv"
FIRST=1
for PHENFILE in "$OUTDIR"/phenotypes/*.phe; do
    # get the replication and generation from the file name
    GENREP=$(echo $(basename "$PHENFILE") | \
        sed 's/^simulation_\(.*\)\.phe$/\1/')
    REP=$(echo $GENREP | sed 's/^r\([0-9][0-9]*\)\(g[0-9][0-9]*\)\?$/\1/')
    if [ "$REP" = "$GENREP" ]; then REP=1; fi
    REP=$(python -c "print int(\"$REP\")")
    GEN=$(echo $GENREP | sed 's/^\(r[0-9][0-9]*\)\?g\([0-9][0-9]*\)$/\2/')
    if [ "$GEN" = "$GENREP" ]; then GEN=1; fi
    GEN=$(python -c "print int(\"$GEN\")")
    # write to the CSV file
    if [ "$FIRST" = 1 ]; then
        rm -f "$OUTFILE_PHEN"
        FIRST=0
        $COMMAND "$PHENFILE" $OPTIONS --extra="replicate:$REP,generation:$GEN" \
            --header > "$OUTFILE_PHEN" 
    else
        $COMMAND "$PHENFILE" $OPTIONS --extra="replicate:$REP,generation:$GEN" \
            --no-header >> "$OUTFILE_PHEN" 
    fi
done

# process the marker files
if [ "$VERBOSE" -gt 0 ]; then echo "<< processing markers >>"; fi
COMMAND="python fstat2csv.py"
OPTIONS="--no-patch --no-age --no-sex --no-mother --no-father --no-fitness"
OUTFILE_MARK="$OUTDIR/ind_mark.csv"
FIRST=1
for MARKFILE in "$OUTDIR"/markers/*.dat; do
    # get the replication and generation from the file name
    GENREP=$(echo $(basename "$MARKFILE") | \
        sed 's/^simulation_\(.*\)\.dat$/\1/')
    REP=$(echo $GENREP | sed 's/^r\([0-9][0-9]*\)\(g[0-9][0-9]*\)\?$/\1/')
    if [ "$REP" = "$GENREP" ]; then REP=1; fi
    REP=$(python -c "print int(\"$REP\")")
    GEN=$(echo $GENREP | sed 's/^\(r[0-9][0-9]*\)\?g\([0-9][0-9]*\)$/\2/')
    if [ "$GEN" = "$GENREP" ]; then GEN=1; fi
    GEN=$(python -c "print int(\"$GEN\")")
    # write to the CSV file
    if [ "$FIRST" = 1 ]; then
        rm -f "$OUTFILE_MARK"
        FIRST=0
        $COMMAND "$MARKFILE" $OPTIONS --extra="replicate:$REP,generation:$GEN" \
            --header > "$OUTFILE_MARK" 
    else
        $COMMAND "$MARKFILE" $OPTIONS --extra="replicate:$REP,generation:$GEN" \
            --no-header >> "$OUTFILE_MARK" 
    fi
done

# join them as the coancestry-fitness file
# TODO: rewrite this using database so it works with larger data
if [ "$VERBOSE" -gt 0 ]; then echo "<< calculating coa and fit >>"; fi
COMMAND="python coafitcsv.py"
OPTIONS=""
OUTFILE_COAW="$OUTDIR/ind_coaw.csv"
$COMMAND $OPTIONS "$OUTFILE_PHEN" "$OUTFILE_MARK" > "$OUTFILE_COAW"

# process the patch statistics
STATFILE="$OUTDIR/simulation_stats.txt"
if [ -e "$STATFILE" ]; then
    # convert txt to CSV
    if [ "$VERBOSE" -gt 0 ]; then echo "<< converting stat file >>"; fi
    COMMAND="python txt2csv.py"
    OPTIONS=""
    OUTFILE_CONV="$OUTDIR/simulation_stats.csv"
    $COMMAND $OPTIONS "$STATFILE" "$OUTFILE_CONV"

    # process the new CSV file
    if [ "$VERBOSE" -gt 0 ]; then echo "<< processing stat file >>"; fi
    COMMAND="python statcsv.py"
    OPTIONS=""
    OUTFILE_STAT="$OUTDIR/patch_stats.csv"
    $COMMAND $OPTIONS "$OUTFILE_CONV" "$OUTFILE_STAT"

    # join together the patch and inbreeding data
    if [ "$VERBOSE" -gt 0 ]; then echo "<< joining inbreeding data >>"; fi
    COMMAND="python inbrdeprcsv.py"
    OPTIONS=""
    OUTFILE_INBR="$OUTDIR/patch_inbr.csv"
    $COMMAND $OPTIONS "$OUTFILE_COAW" "$OUTFILE_STAT" > "$OUTFILE_INBR"
fi

if [ "$VERBOSE" -gt 0 ]; then echo "<< done >>"; fi

exit 0
